/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Advent.of.Code.Java;

import Advent.of.Code.Java.Utility.ClassUtilities;
import Advent.of.Code.Java.Utility.LoadUtilities;
import Advent.of.Code.Java.Utility.LogUtilities;
import Advent.of.Code.Java.Utility.Structures.Day;
import Advent.of.Code.Java.Utility.Structures.Pair;

import java.util.ArrayList;
import java.util.List;

public class App {
    public static void main(String[] arguments) throws Exception {
        LogUtilities.log("Arguments: ", arguments);

        LogUtilities.startTiming("Complete");
        LogUtilities.indent();

        LogUtilities.startTiming("Preload Files");
        LogUtilities.indent();
        LoadUtilities.preloadFiles();
        LogUtilities.unIndent();
        LogUtilities.endTiming("Preload Files");
        LogUtilities.logSeparator();
        LogUtilities.startTiming("Loading Days");
        LogUtilities.indent();
        final List<Day> daysToExecute = new ArrayList<>();

        if (arguments.length >= 2) {
            final Pair<String, String> yearDay = Pair.Create(arguments[0], arguments[1]);
            daysToExecute.add(ClassUtilities.getSpecificDay(yearDay.getKey(), yearDay.getValue()));
        } else if (arguments.length >= 1) {
            final String year = arguments[0];
            daysToExecute.addAll(ClassUtilities.getAllDaysInYear(year));
        } else {
            daysToExecute.addAll(ClassUtilities.getAllDays());
        }
        LogUtilities.log("Loaded " + daysToExecute.size() + " days");

        LogUtilities.unIndent();
        LogUtilities.endTiming("Loading Days");
        LogUtilities.logSeparator();

        LogUtilities.startTiming("Running Days");
        LogUtilities.indent();

        final List<String> failures = new ArrayList<>();
        for (final Day day : daysToExecute) {
            final String identifier = day.getClass().getCanonicalName();
            LogUtilities.startTiming(identifier);
            LogUtilities.indent();
            try {
                day.run();
            } catch (final Exception e) {
                LogUtilities.error("Day failed " + identifier, e);
                failures.add(identifier);
            }
            LogUtilities.unIndent();
            LogUtilities.endTiming(identifier);
            LogUtilities.logSeparator();
        }

        LogUtilities.unIndent();
        LogUtilities.endTiming("Running Days");

        LogUtilities.unIndent();
        LogUtilities.endTiming("Complete");
        LogUtilities.logSeparator();

        if (failures.size() > 0) {
            LogUtilities.error("Failed: " + failures);
        }
        LogUtilities.shutdown();
    }
}
